# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

# Validates that the /beta CSDL is actually clean before we publish an artifact.

# This pipeline clones the msgraph-metadata, msgraph-beta-sdk-dotnet, and the microsoft-graph-docs
# repos. It transforms the metadata using typewriter.exe transform options and
# applies documentation annotations from the docs repo. It then generates the .NET
# code files, and validates that the generated code files will successfully compile.
# The clean metadata is then published as an artifact so that it can be consumed
# in a chained pipeline that will publish the clean metadata to our metadata repo.

name: $(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

trigger: none # disable triggers based on commits.
pr: none # disable triggers based on pull requests.

# TODO: verify that this triggers the rest of the beta pipeline.

resources:
  repositories:
  - repository: msgraph-beta-sdk-dotnet # The name used to reference this repository in the checkout step
    type: github
    endpoint: microsoftgraph
    name: microsoftgraph/msgraph-beta-sdk-dotnet
    ref: master # checkout the master branch
  - repository: microsoft-graph-docs
    type: github
    endpoint: microsoftgraph
    name: microsoftgraph/microsoft-graph-docs
  pipelines:
  - pipeline: prepareMetadata # This pipeline produces an metadata artifact that we need to validate.
    source: (beta - 1) msgraph-capture-metadata
    trigger: # TODO: validate that this pipeline triggers as expected.
      branches:
      - master

pool:
  name: Hosted VS2017
  demands:
  - msbuild

variables:
  - group: MicrosoftGraph # Variable group, where variables not set here come from.
  - name: endpoint
    value: beta

steps:
- checkout: self # msgraph-metadata, or whatever repo contains
  clean: true
  fetchDepth: 1
- checkout: msgraph-beta-sdk-dotnet
  clean: true
  fetchDepth: 1
- checkout: microsoft-graph-docs
  clean: true
  fetchDepth: 1

- task: PowerShell@2 # Setup environment variables and make them available to all tasks. See [1] for more info.
  displayName: 'Calculate and set pipeline variables for this job'
  inputs:
    targetType: inline
    script: |

      if ($env:endpoint -eq 'beta')
      {
        $pathToInputMetadata = $env:System_ArtifactsDirectory + "\metadata_beta\" + $env:metadata_betafilename
      }
      else
      {
        $pathToInputMetadata = $env:System_ArtifactsDirectory + "\metadata_v10\" + $env:metadata_v10filename
      }
      Write-Host "Path to input metadata is $pathToInputMetadata"
      Write-Host "##vso[task.setvariable variable=pathToInputMetadata]$pathToInputMetadata"

      $pathToDocsRepoRoot = Join-Path $env:Build_SourcesDirectory "microsoft-graph-docs" -Resolve
      Write-Host "Path to docs repo is $pathToDocsRepoRoot"
      Write-Host "##vso[task.setvariable variable=pathToDocsRepoRoot]$pathToDocsRepoRoot"

      $outputPath = Join-Path $env:Build_SourcesDirectory "output"
      Write-Host "Path to typewriter.exe output $outputPath"
      Write-Host "##vso[task.setvariable variable=outputPath]$outputPath"

      $cleanMetadataDescriptionFileName = "cleanMetadataWithDescriptions" + $env:endpoint + ".xml"
      $cleanMetadata = Join-Path $outputPath $cleanMetadataDescriptionFileName
      Write-Host "Path to clean metadata $cleanMetadata"
      Write-Host "##vso[task.setvariable variable=cleanMetadata]$cleanMetadata"

- task: PowerShell@2
  displayName: 'DEBUG: Script to show how to access the pipeline variables'
  inputs:
    targetType: inline
    script: |
      Write-Host "Path to input $env:pathToInputMetadata"
      Write-Host "Path to repo root $env:pathToDocsRepoRoot"

- task: DownloadBuildArtifacts@0
  displayName: 'Download documented and clean beta CSDL metadata artifact'
  inputs:
    buildType: specific
    project: '2f15a0d3-3217-4778-8334-4e61181c4029'
    pipeline: 2264
    specificBuildWithTriggering: true
    artifactName: 'metadata_beta'
    downloadPath: '$(System.ArtifactsDirectory)'

- task: PowerShell@2
  displayName: 'Typewriter: transform via preprocess_csdl.xsl and add documentation to the CSDL'
  inputs:
    targetType: filePath
    filePath: '$(Build.SourcesDirectory)/msgraph-metadata/scripts/runTypewriter.ps1'
    arguments: '-verbosity Info -metadata $(pathToInputMetadata) -output $(outputPath) -generationMode TransformWithDocs -t https://raw.githubusercontent.com/microsoftgraph/msgraph-metadata/master/transforms/csdl/preprocess_csdl.xsl -d $(pathToDocsRepoRoot) -cleanup $false -e beta'
    workingDirectory: '$(Build.SourcesDirectory)'
  enabled: true

- task: PowerShell@2
  displayName: 'Typewriter: generate beta .NET files'
  inputs:
    targetType: filePath
    filePath: '$(Build.SourcesDirectory)/msgraph-metadata/scripts/runTypewriter.ps1'
    arguments: '-verbosity Info -metadata $(cleanMetadata) -output $(outputPath) -generationMode Files -e beta'
    workingDirectory: '$(Build.SourcesDirectory)' # Set the root for a multi-repo pipeline. /s
  enabled: true

- task: PowerShell@2
  displayName: 'Copy generated files'
  inputs:
    targetType: filePath
    filePath: '$(Build.SourcesDirectory)/msgraph-metadata/scripts/copyGeneratedFiles.ps1'
    arguments: '@("$(outputPath)/com/microsoft/graph/model/", "$(outputPath)/com/microsoft/graph/requests/") @("$(Build.SourcesDirectory)/msgraph-beta-sdk-dotnet/src/Microsoft.Graph/Models/Generated/", "$(Build.SourcesDirectory)/msgraph-beta-sdk-dotnet/src/Microsoft.Graph/Requests/Generated/")'
    workingDirectory: '$(Build.SourcesDirectory)' # Set the root for a multi-repo pipeline. /s
  enabled: true

# Restore and build the .NET client library. If it doesn't build, then fail the task.
- task: DotNetCoreCLI@2
  displayName: 'Restore Nuget packages'
  inputs:
    command: 'restore'
    projects: '$(Build.SourcesDirectory)/msgraph-beta-sdk-dotnet/**/*.csproj'
    feedsToUse: 'select'
  enabled: true

- task: MSBuild@1
  displayName: 'Build .NET solution with generated files as smoke test'
  inputs:
    solution: '$(Build.SourcesDirectory)/msgraph-beta-sdk-dotnet/**/*.sln'
    configuration: debug
    clean: true
  enabled: true

# Artifact will be used in another pipeline to checkin the clean metadata into
# the GitHub repo. Then it will be used by other pipelines to generate the files.
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: clean beta metadata to checkin with the next pipeline'
  inputs:
    PathtoPublish: '$(outputPath)\cleanMetadataWithDescriptionsbeta.xml'
    ArtifactName: 'clean_beta_metadata'
  enabled: true

# Send a notification to our Graph Tooling channel to let us know that
# automated build failed.

- task: YodLabs.O365PostMessage.O365PostMessageBuild.O365PostMessageBuild@0
  displayName: 'Graph Client Tooling pipeline fail notification'
  inputs:
    addressType: serviceEndpoint
    serviceEndpointName: 'microsoftgraph pipeline status'
    title: '$(Build.DefinitionName) failure notification'
    text: 'This pipeline has failed. View the build details for further information. This is a blocking failure. '
  condition: and(failed(), ne(variables['Build.Reason'], 'Manual')) # Only notify if the automated build failed.
  enabled: true

# References:
# [0] https://docs.microsoft.com/en-us/azure/devops/pipelines/library/variable-groups?view=azure-devops&tabs=yaml
# [1] https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=azure-devops&tabs=yaml%2Cbatch
# https://docs.microsoft.com/en-us/azure/devops/pipelines/repos/multi-repo-checkout?view=azure-devops
# https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema#resources
# https://docs.microsoft.com/en-us/azure/devops/pipelines/build/triggers?view=azure-devops&tabs=yaml#pipeline-triggers
# https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/?view=azure-devops

# Potential next steps
# - refactor and templatize much of this and share with the validateCleanedMetadata_v1.0.yml pipeline.